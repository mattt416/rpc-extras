#!/usr/bin/env python

# Copyright 2016, Rackspace US, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import argparse
from elasticsearch import Elasticsearch
import requests
import time


def get_indices(es):
    """Fetch a list of all of the elasticsearch indices."""
    return es.indices.get_aliases().keys()


def get_stats(es):
    """Fetch the statistics for all of the elasticsearch indices."""
    return es.indices.stats()


def reindex(es_host):
    """Create -liberty indices and start the reindex process."""
    for index in get_indices():
        reindex_params = 'http://' + es_host + \
                     '/' + index + '/_reindex/' + index + '-liberty/'
        requests.post(reindex_params)


def clean_legacy(es, dry_run):
    """Drops the -liberty indices created by a previous reindex."""
    if dry_run:
        print("Dry run, no operations will be performed")
    for index in get_indices():
        if '-liberty' in index:
            if not dry_run:
                es.indices.delete(index)
            print ("Deleted: {}").format(index)


def monitor_reindex(es):
    """Monitor the reindexing process."""
    for index in get_indices(es):
        if '-liberty' not in index:
            slave_index = index + '-liberty'
            stats = get_stats(es)
            master_count = stats['indices'][index]['primaries']['docs'] \
                                ['count']
            try:
                slave_count = stats['indices'][slave_index]['primaries'] \
                                   ['docs']['count']
            except KeyError:
                slave_count = 0
                pass
            reindex_pct = (float(slave_count) / float(master_count)) * 100
            print("Master Index: {0:15s} " \
                  "Slave Index: {1:15s} " \
                  "Master Count: {2:10d} " \
                  "Slave Count: {3:10d} " \
                  "Percentage Complete: {4:3.2f}%").format(index, \
                                                           slave_index, \
                                                           master_count, \
                                                           slave_count, \
                                                           reindex_pct)


def drop_legacy(es, dry_run):
    """Drop the legacy logstash-* indices."""
    if dry_run:
        print("Dry run, no operations will be performed")
    for index in get_indices():
        if '-liberty' not in index and 'logstash' in index:
            if not dry_run:
                es.indices.delete(index)
            print("Dropping Legacy Index: {}").format(index)


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("--host", default="localhost", \
        help="Elasticsearch host to connect to (default: localhost)")
    parser.add_argument("--port", default="9200", \
        help="Elasticsearch port to connect to (default: 9200)")
    parser.add_argument("--clean", action="store_true", \
        help="Clean previous reindexed indices")
    parser.add_argument("--reindex", action="store_true", \
        help="Reindex legacy indexes")
    parser.add_argument("--monitor", action="store_true", \
        help="Progress of reindexing")
    parser.add_argument("--continuous", action="store_true", \
        help="Continuous monitoring")
    parser.add_argument("--drop", action="store_true", \
        help="Drop legacy indices")
    parser.add_argument("--dry_run", action="store_true",\
        help="Prints what will happen for drop and clean operations")
    args = parser.parse_args()

    es_host = args.host + ":" + args.port
    print("Connecting to elasticsearch at {}").format(es_host)
    es = Elasticsearch(es_host)

    if args.clean:
        clean_legacy(es, args.dry_run)
    if args.reindex:
        reindex(es_host)
    if args.monitor:
        monitor_reindex(es)
    if args.drop:
        drop_legacy(es, args.dry_run)
    if args.continuous:
        # TODO:I hate this, need to figure out a better way to do this.
        while True:
            monitor_reindex(es)
            print "\n"
            time.sleep(2)

if __name__ == "__main__":
    main()

