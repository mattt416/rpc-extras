---
# Copyright 2015, Rackspace US, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

- name: Discover Ceph facts
  ceph_osd_host_facts:
  register: ceph_osd_facts
  tags: always
  when: inventory_hostname in groups['osds']

- name: Create ceph monitoring client
  command: ceph auth get-or-create client.raxmon mon 'allow r'
  register: ceph_raxmon_client
  delegate_to: "{{ groups['mons'][0] }}"

- name: Write Ceph monitoring client key to file
  copy:
    content: '{{[ceph_raxmon_client.stdout, "\n"] | join("") }}'
    dest: "/etc/ceph/ceph.client.raxmon.keyring"
  delegate_to: "{{ physical_host }}"

- include: ceph_osd_setup.yml
  vars:
    check_name: ceph_osd_stats
    check_details: "file=ceph_monitoring.py,args={{ '--type' }},args={{ 'osd' }},args={{ '--host' }},args={{ ansible_hostname }},args={{ '--name' }},args='client.raxmon',args={{ '--keyring' }},args='/etc/ceph/ceph.client.raxmon.keyring',args={{ '--osd_ids' }},args={{ ceph_osd_host['osd_ids'] | join(' ') | quote }}"
    check_period: "{{ maas_check_period }}"
    check_timeout: "{{ maas_check_timeout }}"
    alarms:
      - { 'name': 'ceph_warn', 'criteria': ':set consecutiveCount={{ maas_alarm_local_consecutive_count }} if (metric["OSD_up"] == 0) { return new AlarmStatus(CRITICAL, "Ceph osd error."); }' }
  when: inventory_hostname in groups['osds']

- include: local_setup.yml
  vars:
    check_name: ceph_mon_stats
    check_details: "file=ceph_monitoring.py,args={{ '--type' }},args={{ 'mon' }},args={{ '--host' }},args={{ ansible_hostname }},args={{ '--name' }},args='client.raxmon',args={{ '--keyring' }},args='/etc/ceph/ceph.client.raxmon.keyring'"
    check_period: "{{ maas_check_period }}"
    check_timeout: "{{ maas_check_timeout }}"
    alarms:
      - { 'name': 'mon_health_err', 'criteria': ':set consecutiveCount={{ maas_alarm_local_consecutive_count }} if (metric["mon_health"] == 0) { return new AlarmStatus(CRITICAL, "Ceph mon error."); }' }
      - { 'name': 'mon_health_warn', 'criteria': ':set consecutiveCount={{ maas_alarm_local_consecutive_count }} if (metric["mon_health"] == 1) { return new AlarmStatus(WARNING, "Ceph mon warning."); }' }
  when: inventory_hostname in groups['mons']

- include: local_setup.yml
  vars:
    check_name: ceph_cluster_stats
    check_details: "file=ceph_monitoring.py,args={{ '--type' }},args={{ 'cluster' }},args={{ '--host' }},args={{ ansible_hostname }},args={{ '--name' }},args='client.raxmon',args={{ '--keyring' }},args='/etc/ceph/ceph.client.raxmon.keyring'"
    check_period: "{{ maas_check_period }}"
    check_timeout: "{{ maas_check_timeout }}"
    alarms:
      - { 'name': 'ceph_health_err', 'criteria': ':set consecutiveCount={{ maas_alarm_local_consecutive_count }} if (metric["cluster_health"] == 0) { return new AlarmStatus(CRITICAL, "Ceph cluster error."); }' }
      - { 'name': 'ceph_health_warn', 'criteria': ':set consecutiveCount={{ maas_alarm_local_consecutive_count }} if (metric["cluster_health"] == 1) { return new AlarmStatus(WARNING, "Ceph cluster warning."); }' }
  when: inventory_hostname in groups['mons']
